{"version":3,"sources":["City.js","Form.js","CityInfo.js","More.js","Errors.js","App.js","reportWebVitals.js","index.js"],"names":["City","city","handleDeleteCity","f","console","log","className","Card","Button","variant","color","onClick","id","CardContent","Typography","gutterBottom","name","weather","description","src","icon","alt","Math","round","main","temp_min","temp_max","coord","lon","lat","to","message","Form","handleOnChange","handleOnClick","cityName","FormControl","InputLabel","htmlFor","Input","aria-describedby","onChange","value","style","marginTop","CityInfo","useState","setCityName","cityData","setCityData","error","setError","loading","setLoading","fetchWeather","url","process","fetch","then","res","ok","Error","json","data","cod","catch","filterCity","filter","e","target","map","More","match","Errors","location","useLocation","history","useHistory","height","backgroundColor","pathname","push","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9672520e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nimport { Link } from \"react-router-dom\";\nimport { FaTrash } from \"react-icons/fa\";\nimport { Card, CardContent, Typography, Button } from \"@material-ui/core\";\n\nexport default function City({ city, handleDeleteCity = (f) => f }) {\n  console.log(city);\n  return (\n    <div className=\"App\">\n      {city ? (\n        <div>\n          <Card className=\"card\">\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => handleDeleteCity(city.id)}\n            >\n              <FaTrash />\n            </Button>\n            <CardContent className=\"content\">\n              <Typography className=\"heading\" variant={\"h6\"} gutterBottom>\n                {city.name}\n              </Typography>\n              <Typography className=\"subheading\" variant={\"caption\"}>\n                <p>{city.weather[0].description}</p>\n                <img\n                  src={`http://openweathermap.org/img/w/${city.weather[0].icon}.png`}\n                  alt={city.weather[0].icon}\n                />\n                <p>\n                  {Math.round(city.main.temp_min)}° ||{\" \"}\n                  {Math.round(city.main.temp_max)}°\n                </p>\n                <p>\n                  Location :{city.coord.lon} || {city.coord.lat}\n                </p>\n                <Link to={`/more/${city.id}`}>\n                  <p>More >></p>\n                </Link>\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      ) : (\n        <p>{city.message}</p>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FormControl, InputLabel, Input, Button } from \"@material-ui/core\";\nimport { FaSearch } from \"react-icons/fa\";\n\nexport default function Form({ handleOnChange, handleOnClick, cityName }) {\n  return (\n    <>\n      <FormControl>\n        <InputLabel htmlFor=\"my-input\"></InputLabel>\n        <Input\n          id=\"my-input\"\n          aria-describedby=\"my-helper-text\"\n          onChange={handleOnChange}\n          value={cityName}\n        />\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleOnClick}\n          style={{ marginTop: 10 }}\n        >\n          <FaSearch />\n        </Button>\n      </FormControl>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport City from \"./City\";\nimport Form from \"./Form\";\n\nexport default function CityInfo() {\n  const [cityName, setCityName] = useState(\" \");\n  const [cityData, setCityData] = useState([]);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const fetchWeather = (cityName) => {\n    setLoading(true);\n    setError(false);\n\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=${process.env.REACT_APP_SECRET_CODE}`;\n    fetch(url)\n      .then((res) => {\n        if (!res.ok) {\n          throw Error(\"could not fetch the data from the resourse\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        if (data.cod === 200) {\n          console.log(data);\n          setCityName(\"\");\n          setCityData([data, ...cityData]);\n          setError(false);\n          setLoading(false);\n        } else {\n          setError(data.message);\n          setLoading(false);\n        }\n      })\n      .catch((error) => {\n        setError(error.message);\n        setLoading(false);\n      });\n  };\n  const handleDeleteCity = (id) => {\n    const filterCity = cityData.filter((city) => city.id !== id);\n    setCityData(filterCity);\n  };\n  const handleOnClick = () => {\n    fetchWeather(cityName);\n    if (cityName !== \" \") fetchWeather(cityName);\n  };\n\n  const handleOnChange = (e) => {\n    setCityName(e.target.value);\n  };\n  return (\n    <>\n      <Form\n        handleOnChange={handleOnChange}\n        handleOnClick={handleOnClick}\n        cityName={cityName}\n      />\n\n      {loading && <p>Loading...</p>}\n      {error && <p>Error 404</p>}\n      {cityData.map((city) => (\n        <City city={city} handleDeleteCity={handleDeleteCity} key={city.id} />\n      ))}\n      {cityName === \" \" ? <p>Insert city to get current weather</p> : null}\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function More({ match }) {\n  return (\n    <div>\n      <p>Routing test</p>\n      {/* {match.params.id} */}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nexport default function Errors() {\n  const location = useLocation();\n  let history = useHistory();\n  function handleOnClick() {\n    history.push(\"/\");\n  }\n  return (\n    <div style={{ height: 70, color: \"white\", backgroundColor: \"red\" }}>\n      <p>Whoops 404</p>\n      <p>{location.pathname}</p>\n      <button onClick={handleOnClick}>Go Back</button>\n    </div>\n  );\n}\n","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport CityInfo from \"./CityInfo\";\nimport More from \"./More\";\nimport Errors from \"./Errors\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={CityInfo} />\n          <Route path=\"/more/:id\" component={More} />\n          <Route path=\"*\" component={Errors} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}